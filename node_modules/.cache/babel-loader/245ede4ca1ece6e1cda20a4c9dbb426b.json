{"ast":null,"code":"import _regeneratorRuntime from\"D:/Github/starway_dapp/msdia80.dll/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"D:/Github/starway_dapp/msdia80.dll/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"D:/Github/starway_dapp/msdia80.dll/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import useMounajiTestContract from\"../../hooks/useMounajiTestContract\";import{AspectRatio,Stack,Flex,Heading,Text,Box,Button,Image,Badge,useToast}from\"@chakra-ui/react\";import{Link}from\"react-router-dom\";import{useWeb3React}from\"@web3-react/core\";import{useCallback,useEffect,useState}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Home=function Home(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isMinting=_useState2[0],setIsMinting=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),imageSrc=_useState4[0],setImageSrc=_useState4[1];var _useWeb3React=useWeb3React(),active=_useWeb3React.active,account=_useWeb3React.account;var mounajiTestContract=useMounajiTestContract();var toast=useToast();var getMounajiTestContractData=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var totalSupply,getBalance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!mounajiTestContract){_context.next=7;break;}_context.next=3;return mounajiTestContract.methods.totalSupply().call();case 3:totalSupply=_context.sent;_context.next=6;return mounajiTestContract.methods.balanceOf(account).call();case 6:getBalance=_context.sent;case 7:case\"end\":return _context.stop();}}},_callee);})),[mounajiTestContract,account]);useEffect(function(){getMounajiTestContractData();},[getMounajiTestContractData]);var mint=function mint(){setIsMinting(true);mounajiTestContract.methods.mint(account,1000000).send({from:account,value:1e18}).on('transactionHash',function(txHash){setIsMinting(false);toast({title:'transaccion enviada',description:'txHash',status:'info'});}).on('receipt',function(){setIsMinting(false);toast({title:'Transaccion confirmada !',description:'Enjoy playing Starway !',status:'success'});}).on('error',function(error){setIsMinting(false);toast({title:'Transaccion fallida',description:error.message,status:'error'});});};return/*#__PURE__*/_jsxs(Box,{marginTop:'50px',children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Starway\"}),/*#__PURE__*/_jsx(Image,{maxW:\"700px\",borderWidth:\"1px\",borderRadius:\"lg\",overflow:\"scroll\",position:\"center\",marginTop:\"-200px\",src:\"/images/starway.png\"})]})//   <Box\n//   maxW='fixed' borderWidth='1px' borderRadius='lg'\n//   backgroundcolor='blue'\n//   pos={\"absolute\"}\n//   align={\"center\"}\n//   justify={\"center\"}\n//   backgroundRepeat={\"no-repeat\"}\n//   backgroundSize={\"cover\"}\n//   margin={\"0\"}\n//   top={\"55px\" }\n//   left={\"0\"}\n//   w={\"100%\"}\n//   h={\"100%\"}\n// >\n// <Image \n//   maxW='700px' borderWidth='1px' borderRadius='lg' overflow='scroll' position='top'\n//   marginTop={\"-200px\"}\n//   src={\"../images/starway.png\"}\n// />\n// <Stack\n//       align={\"center\"}\n//       spacing={{ base: 8, md: 10 }}\n//        py={{ base: -20, md: -20 }}\n//       direction={{ base: \"column-reverse\", md: \"row\" }}\n//     >\n//       <Stack flex={1} spacing={{ base: 5, md: 10 }} marginTop={'250px'}>\n//         <AspectRatio maxW='500px' ratio={1}   >\n//   <iframe\n//     title='naruto'\n//     pos={'absolute'}\n//     width={'100px'}\n//     src='https://www.youtube.com/embed/ES6SQhlEXfI'\n//     allowFullScreen\n//   />\n// </AspectRatio>\n//         <Text color={\"gray.500\"}>\n//           Star token is a cryto-currency that is used for participate in Rank modes on Starway \n//         </Text>\n//         <Text color={\"green.500\"}>\n//           Get your Stars and start ean for playing now !\n//         </Text>\n//         <Stack\n//           spacing={{ base: 4, sm: 6 }}\n//           direction={{ base: \"column\", sm: \"row\" }}\n//         >\n//           <Button\n//             rounded={\"full\"}\n//             size={\"lg\"}\n//             fontWeight={\"normal\"}\n//             px={6}\n//             colorScheme={\"green\"}\n//             bg={\"green.400\"}\n//             _hover={{ bg: \"green.500\" }}\n//             disabled={!mounajiTestContract}\n//             onClick={mint}\n//             isLoading= {isMinting}\n//           >\n//             Get your Star Token !\n//           </Button>\n//           <Link to=\"/swaptokens\">\n//             <Button rounded={\"full\"} size={\"lg\"} fontWeight={\"normal\"} px={6}>\n//               SwapTokens\n//             </Button>\n//           </Link>\n//         </Stack>\n//       </Stack>\n//       <Flex\n//         flex={1}\n//         direction=\"column\"\n//         justify={\"center\"}\n//         align={\"center\"}\n//         position={\"relative\"}\n//         w={\"full\"}\n//       >\n//         <Image \n//         src={active ? imageSrc : \"../../images/starway.png\"} />\n//         {active ? (\n//           <>\n//           </>\n//         ) : (\n//           <Badge mt={2}>Wallet desconectado</Badge>\n//         )}\n//       </Flex>\n//     </Stack>\n//     </Box>  \n;};export default Home;// import { useWeb3React } from '@web3-react/core';\n// import { useCallback, useEffect, useState } from 'react';\n// import useMounajiTestContract from '../../hooks/useMounajiTestContract';\n// const Home = () => {\n//   const { active }  = useWeb3React(); \n//   const [totalSupply, setTotalSupply] = useState();\n//   const mounajiTestContract = useMounajiTestContract();\n//   const getTotalSupply = useCallback(async () => {\n//     if(mounajiTestContract){\n//       const result = await mounajiTestContract.methods.totalSupply().call();\n//       setTotalSupply(result);\n//     }\n//   }, [mounajiTestContract])\n//   useEffect (() => {\n//       getTotalSupply();\n//   }, [getTotalSupply]);\n//   if (!active) return \"Connect your wallet\"\n//   return (\n//     <>\n//       <p>Max supply:{totalSupply} </p>\n//     </>\n//   );\n// };\n// export default Home;","map":{"version":3,"sources":["D:/Github/starway_dapp/msdia80.dll/src/views/home/index.js"],"names":["useMounajiTestContract","AspectRatio","Stack","Flex","Heading","Text","Box","Button","Image","Badge","useToast","Link","useWeb3React","useCallback","useEffect","useState","Home","isMinting","setIsMinting","imageSrc","setImageSrc","active","account","mounajiTestContract","toast","getMounajiTestContractData","methods","totalSupply","call","balanceOf","getBalance","mint","send","from","value","on","txHash","title","description","status","error","message"],"mappings":"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","sourcesContent":["import useMounajiTestContract from \"../../hooks/useMounajiTestContract\";\r\nimport {\r\n  AspectRatio,\r\n  Stack,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  Box,\r\n  Button,\r\n  Image,\r\n  Badge,\r\n  useToast\r\n} from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\n\r\nconst Home = () => {\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [imageSrc, setImageSrc] = useState(\"\");\r\n  const { active, account } = useWeb3React();\r\n  const mounajiTestContract = useMounajiTestContract();\r\n  const toast = useToast();\r\n  \r\n  const getMounajiTestContractData = useCallback(async () => {\r\n    if (mounajiTestContract) {\r\n      const totalSupply = await mounajiTestContract.methods.totalSupply().call();\r\n      const getBalance = await mounajiTestContract.methods.balanceOf(account).call();\r\n      //   .deterministicPseudoRandomDNA(totalSupply, account)\r\n      //   .call();\r\n      // const image = await mounajiTestContract.methods.imageByDNA(dnaPreview).call();\r\n      // setImageSrc(image);\r\n    }\r\n  }, [mounajiTestContract, account]);\r\n\r\n  useEffect(() => {\r\n    getMounajiTestContractData();\r\n  }, [getMounajiTestContractData]);\r\n\r\n  const mint = () => {\r\n    setIsMinting(true);\r\n\r\nmounajiTestContract.methods.mint(account, 1000000).send({\r\n\r\n\r\n  from: account,\r\n  value: 1e18\r\n\r\n})\r\n.on('transactionHash', (txHash) => {\r\n  setIsMinting(false);\r\n   toast({\r\n     title: 'transaccion enviada',\r\n     description: 'txHash',\r\n     status: 'info'\r\n   })\r\n\r\n})\r\n.on('receipt',() => {\r\n  setIsMinting(false);\r\n  toast({\r\n    title: 'Transaccion confirmada !',\r\n    description: 'Enjoy playing Starway !',\r\n    status: 'success'\r\n\r\n  })\r\n\r\n})\r\n.on('error', (error) => {\r\n  setIsMinting(false);\r\n  toast({\r\n    title: 'Transaccion fallida',\r\n    description: error.message,\r\n    status: 'error',\r\n  })\r\n\r\n})\r\n  }\r\n  return (\r\n    <Box marginTop={'50px'}>\r\n      <h1>Starway</h1>\r\n     \r\n      <Image \r\n   maxW='700px' borderWidth='1px' borderRadius='lg' overflow='scroll' position='center'\r\n   marginTop={\"-200px\"}\r\n   src={\"/images/starway.png\"}/>\r\n   \r\n    </Box>\r\n    \r\n//   <Box\r\n//   maxW='fixed' borderWidth='1px' borderRadius='lg'\r\n  \r\n//   backgroundcolor='blue'\r\n  \r\n//   pos={\"absolute\"}\r\n//   align={\"center\"}\r\n//   justify={\"center\"}\r\n//   backgroundRepeat={\"no-repeat\"}\r\n//   backgroundSize={\"cover\"}\r\n//   margin={\"0\"}\r\n//   top={\"55px\" }\r\n//   left={\"0\"}\r\n//   w={\"100%\"}\r\n//   h={\"100%\"}\r\n// >\r\n// <Image \r\n//   maxW='700px' borderWidth='1px' borderRadius='lg' overflow='scroll' position='top'\r\n//   marginTop={\"-200px\"}\r\n//   src={\"../images/starway.png\"}\r\n  \r\n  \r\n  \r\n  \r\n// />\r\n\r\n// <Stack\r\n      \r\n//       align={\"center\"}\r\n//       spacing={{ base: 8, md: 10 }}\r\n//        py={{ base: -20, md: -20 }}\r\n//       direction={{ base: \"column-reverse\", md: \"row\" }}\r\n      \r\n//     >\r\n      \r\n        \r\n      \r\n   \r\n//       <Stack flex={1} spacing={{ base: 5, md: 10 }} marginTop={'250px'}>\r\n        \r\n      \r\n//         <AspectRatio maxW='500px' ratio={1}   >\r\n//   <iframe\r\n//     title='naruto'\r\n//     pos={'absolute'}\r\n//     width={'100px'}\r\n//     src='https://www.youtube.com/embed/ES6SQhlEXfI'\r\n//     allowFullScreen\r\n    \r\n//   />\r\n// </AspectRatio>\r\n\r\n       \r\n//         <Text color={\"gray.500\"}>\r\n//           Star token is a cryto-currency that is used for participate in Rank modes on Starway \r\n//         </Text>\r\n//         <Text color={\"green.500\"}>\r\n//           Get your Stars and start ean for playing now !\r\n//         </Text>\r\n//         <Stack\r\n//           spacing={{ base: 4, sm: 6 }}\r\n//           direction={{ base: \"column\", sm: \"row\" }}\r\n//         >\r\n//           <Button\r\n//             rounded={\"full\"}\r\n//             size={\"lg\"}\r\n//             fontWeight={\"normal\"}\r\n//             px={6}\r\n//             colorScheme={\"green\"}\r\n//             bg={\"green.400\"}\r\n//             _hover={{ bg: \"green.500\" }}\r\n//             disabled={!mounajiTestContract}\r\n//             onClick={mint}\r\n//             isLoading= {isMinting}\r\n//           >\r\n//             Get your Star Token !\r\n//           </Button>\r\n//           <Link to=\"/swaptokens\">\r\n//             <Button rounded={\"full\"} size={\"lg\"} fontWeight={\"normal\"} px={6}>\r\n//               SwapTokens\r\n//             </Button>\r\n//           </Link>\r\n//         </Stack>\r\n//       </Stack>\r\n//       <Flex\r\n//         flex={1}\r\n//         direction=\"column\"\r\n//         justify={\"center\"}\r\n//         align={\"center\"}\r\n//         position={\"relative\"}\r\n//         w={\"full\"}\r\n//       >\r\n//         <Image \r\n//         src={active ? imageSrc : \"../../images/starway.png\"} />\r\n//         {active ? (\r\n//           <>\r\n            \r\n//           </>\r\n//         ) : (\r\n//           <Badge mt={2}>Wallet desconectado</Badge>\r\n//         )}\r\n//       </Flex>\r\n//     </Stack>\r\n//     </Box>  \r\n      \r\n    \r\n   );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useWeb3React } from '@web3-react/core';\r\n// import { useCallback, useEffect, useState } from 'react';\r\n// import useMounajiTestContract from '../../hooks/useMounajiTestContract';\r\n\r\n// const Home = () => {\r\n//   const { active }  = useWeb3React(); \r\n//   const [totalSupply, setTotalSupply] = useState();\r\n\r\n//   const mounajiTestContract = useMounajiTestContract();\r\n\r\n//   const getTotalSupply = useCallback(async () => {\r\n//     if(mounajiTestContract){\r\n//       const result = await mounajiTestContract.methods.totalSupply().call();\r\n//       setTotalSupply(result);\r\n//     }\r\n\r\n//   }, [mounajiTestContract])\r\n\r\n//   useEffect (() => {\r\n//       getTotalSupply();\r\n//   }, [getTotalSupply]);\r\n\r\n//   if (!active) return \"Connect your wallet\"\r\n\r\n//   return (\r\n//     <>\r\n//       <p>Max supply:{totalSupply} </p>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n"]},"metadata":{},"sourceType":"module"}