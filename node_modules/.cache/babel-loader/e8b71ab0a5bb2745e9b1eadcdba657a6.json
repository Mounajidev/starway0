{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\starway_dapp\\\\msdia80.dll\\\\src\\\\views\\\\home\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport useMounajiTestContract from \"../../hooks/useMounajiTestContract\";\nimport { AspectRatio, Stack, Flex, Heading, Text, Box, Button, Image, Badge, useToast } from \"@chakra-ui/react\";\nimport { Link } from \"react-router-dom\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [isMinting, setIsMinting] = useState(false);\n  const [imageSrc, setImageSrc] = useState(\"\");\n  const {\n    active,\n    account\n  } = useWeb3React();\n  const mounajiTestContract = useMounajiTestContract();\n  const toast = useToast();\n  const getMounajiTestContractData = useCallback(async () => {\n    if (mounajiTestContract) {\n      const totalSupply = await mounajiTestContract.methods.totalSupply().call();\n      const getBalance = await mounajiTestContract.methods.balanceOf(account).call(); //   .deterministicPseudoRandomDNA(totalSupply, account)\n      //   .call();\n      // const image = await mounajiTestContract.methods.imageByDNA(dnaPreview).call();\n      // setImageSrc(image);\n    }\n  }, [mounajiTestContract, account]);\n  useEffect(() => {\n    getMounajiTestContractData();\n  }, [getMounajiTestContractData]);\n\n  const mint = () => {\n    setIsMinting(true);\n    mounajiTestContract.methods.mint(account, 1000000).send({\n      from: account,\n      value: 1e18\n    }).on('transactionHash', txHash => {\n      setIsMinting(false);\n      toast({\n        title: 'transaccion enviada',\n        description: 'txHash',\n        status: 'info'\n      });\n    }).on('receipt', () => {\n      setIsMinting(false);\n      toast({\n        title: 'Transaccion confirmada !',\n        description: 'Enjoy playing Starway !',\n        status: 'success'\n      });\n    }).on('error', error => {\n      setIsMinting(false);\n      toast({\n        title: 'Transaccion fallida',\n        description: error.message,\n        status: 'error'\n      });\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(\"title\", {\n      children: \"Starway\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this) //   <Box\n  //   maxW='fixed' borderWidth='1px' borderRadius='lg'\n  //   backgroundcolor='blue'\n  //   pos={\"absolute\"}\n  //   align={\"center\"}\n  //   justify={\"center\"}\n  //   backgroundRepeat={\"no-repeat\"}\n  //   backgroundSize={\"cover\"}\n  //   margin={\"0\"}\n  //   top={\"55px\" }\n  //   left={\"0\"}\n  //   w={\"100%\"}\n  //   h={\"100%\"}\n  // >\n  // <Image \n  //   maxW='700px' borderWidth='1px' borderRadius='lg' overflow='scroll' position='top'\n  //   marginTop={\"-200px\"}\n  //   src={\"../images/starway.png\"}\n  // />\n  // <Stack\n  //       align={\"center\"}\n  //       spacing={{ base: 8, md: 10 }}\n  //        py={{ base: -20, md: -20 }}\n  //       direction={{ base: \"column-reverse\", md: \"row\" }}\n  //     >\n  //       <Stack flex={1} spacing={{ base: 5, md: 10 }} marginTop={'250px'}>\n  //         <AspectRatio maxW='500px' ratio={1}   >\n  //   <iframe\n  //     title='naruto'\n  //     pos={'absolute'}\n  //     width={'100px'}\n  //     src='https://www.youtube.com/embed/ES6SQhlEXfI'\n  //     allowFullScreen\n  //   />\n  // </AspectRatio>\n  //         <Text color={\"gray.500\"}>\n  //           Star token is a cryto-currency that is used for participate in Rank modes on Starway \n  //         </Text>\n  //         <Text color={\"green.500\"}>\n  //           Get your Stars and start ean for playing now !\n  //         </Text>\n  //         <Stack\n  //           spacing={{ base: 4, sm: 6 }}\n  //           direction={{ base: \"column\", sm: \"row\" }}\n  //         >\n  //           <Button\n  //             rounded={\"full\"}\n  //             size={\"lg\"}\n  //             fontWeight={\"normal\"}\n  //             px={6}\n  //             colorScheme={\"green\"}\n  //             bg={\"green.400\"}\n  //             _hover={{ bg: \"green.500\" }}\n  //             disabled={!mounajiTestContract}\n  //             onClick={mint}\n  //             isLoading= {isMinting}\n  //           >\n  //             Get your Star Token !\n  //           </Button>\n  //           <Link to=\"/swaptokens\">\n  //             <Button rounded={\"full\"} size={\"lg\"} fontWeight={\"normal\"} px={6}>\n  //               SwapTokens\n  //             </Button>\n  //           </Link>\n  //         </Stack>\n  //       </Stack>\n  //       <Flex\n  //         flex={1}\n  //         direction=\"column\"\n  //         justify={\"center\"}\n  //         align={\"center\"}\n  //         position={\"relative\"}\n  //         w={\"full\"}\n  //       >\n  //         <Image \n  //         src={active ? imageSrc : \"../../images/starway.png\"} />\n  //         {active ? (\n  //           <>\n  //           </>\n  //         ) : (\n  //           <Badge mt={2}>Wallet desconectado</Badge>\n  //         )}\n  //       </Flex>\n  //     </Stack>\n  //     </Box>  \n  ;\n};\n\n_s(Home, \"I7JZc4ydxf7QmmWvD97lDirGows=\", false, function () {\n  return [useWeb3React, useMounajiTestContract, useToast];\n});\n\n_c = Home;\nexport default Home; // import { useWeb3React } from '@web3-react/core';\n// import { useCallback, useEffect, useState } from 'react';\n// import useMounajiTestContract from '../../hooks/useMounajiTestContract';\n// const Home = () => {\n//   const { active }  = useWeb3React(); \n//   const [totalSupply, setTotalSupply] = useState();\n//   const mounajiTestContract = useMounajiTestContract();\n//   const getTotalSupply = useCallback(async () => {\n//     if(mounajiTestContract){\n//       const result = await mounajiTestContract.methods.totalSupply().call();\n//       setTotalSupply(result);\n//     }\n//   }, [mounajiTestContract])\n//   useEffect (() => {\n//       getTotalSupply();\n//   }, [getTotalSupply]);\n//   if (!active) return \"Connect your wallet\"\n//   return (\n//     <>\n//       <p>Max supply:{totalSupply} </p>\n//     </>\n//   );\n// };\n// export default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["D:/Github/starway_dapp/msdia80.dll/src/views/home/index.js"],"names":["useMounajiTestContract","AspectRatio","Stack","Flex","Heading","Text","Box","Button","Image","Badge","useToast","Link","useWeb3React","useCallback","useEffect","useState","Home","isMinting","setIsMinting","imageSrc","setImageSrc","active","account","mounajiTestContract","toast","getMounajiTestContractData","totalSupply","methods","call","getBalance","balanceOf","mint","send","from","value","on","txHash","title","description","status","error","message"],"mappings":";;;AAAA,OAAOA,sBAAP,MAAmC,oCAAnC;AACA,SACEC,WADF,EAEEC,KAFF,EAGEC,IAHF,EAIEC,OAJF,EAKEC,IALF,EAMEC,GANF,EAOEC,MAPF,EAQEC,KARF,EASEC,KATF,EAUEC,QAVF,QAWO,kBAXP;AAYA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAEM,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAsBV,YAAY,EAAxC;AACA,QAAMW,mBAAmB,GAAGvB,sBAAsB,EAAlD;AACA,QAAMwB,KAAK,GAAGd,QAAQ,EAAtB;AAEA,QAAMe,0BAA0B,GAAGZ,WAAW,CAAC,YAAY;AACzD,QAAIU,mBAAJ,EAAyB;AACvB,YAAMG,WAAW,GAAG,MAAMH,mBAAmB,CAACI,OAApB,CAA4BD,WAA5B,GAA0CE,IAA1C,EAA1B;AACA,YAAMC,UAAU,GAAG,MAAMN,mBAAmB,CAACI,OAApB,CAA4BG,SAA5B,CAAsCR,OAAtC,EAA+CM,IAA/C,EAAzB,CAFuB,CAGvB;AACA;AACA;AACA;AACD;AACF,GAT6C,EAS3C,CAACL,mBAAD,EAAsBD,OAAtB,CAT2C,CAA9C;AAWAR,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,0BAA0B;AAC3B,GAFQ,EAEN,CAACA,0BAAD,CAFM,CAAT;;AAIA,QAAMM,IAAI,GAAG,MAAM;AACjBb,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEJK,IAAAA,mBAAmB,CAACI,OAApB,CAA4BI,IAA5B,CAAiCT,OAAjC,EAA0C,OAA1C,EAAmDU,IAAnD,CAAwD;AAGtDC,MAAAA,IAAI,EAAEX,OAHgD;AAItDY,MAAAA,KAAK,EAAE;AAJ+C,KAAxD,EAOCC,EAPD,CAOI,iBAPJ,EAOwBC,MAAD,IAAY;AACjClB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACCM,MAAAA,KAAK,CAAC;AACJa,QAAAA,KAAK,EAAE,qBADH;AAEJC,QAAAA,WAAW,EAAE,QAFT;AAGJC,QAAAA,MAAM,EAAE;AAHJ,OAAD,CAAL;AAMF,KAfD,EAgBCJ,EAhBD,CAgBI,SAhBJ,EAgBc,MAAM;AAClBjB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAM,MAAAA,KAAK,CAAC;AACJa,QAAAA,KAAK,EAAE,0BADH;AAEJC,QAAAA,WAAW,EAAE,yBAFT;AAGJC,QAAAA,MAAM,EAAE;AAHJ,OAAD,CAAL;AAOD,KAzBD,EA0BCJ,EA1BD,CA0BI,OA1BJ,EA0BcK,KAAD,IAAW;AACtBtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAM,MAAAA,KAAK,CAAC;AACJa,QAAAA,KAAK,EAAE,qBADH;AAEJC,QAAAA,WAAW,EAAEE,KAAK,CAACC,OAFf;AAGJF,QAAAA,MAAM,EAAE;AAHJ,OAAD,CAAL;AAMD,KAlCD;AAmCG,GAtCD;;AAuCA,sgHD,CA7KD;;GAAMvB,I;UAGwBJ,Y,EACAZ,sB,EACdU,Q;;;KALVM,I;AA+KN,eAAeA,IAAf,C,CAUA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import useMounajiTestContract from \"../../hooks/useMounajiTestContract\";\r\nimport {\r\n  AspectRatio,\r\n  Stack,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  Box,\r\n  Button,\r\n  Image,\r\n  Badge,\r\n  useToast\r\n} from \"@chakra-ui/react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useWeb3React } from \"@web3-react/core\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\n\r\nconst Home = () => {\r\n  const [isMinting, setIsMinting] = useState(false);\r\n  const [imageSrc, setImageSrc] = useState(\"\");\r\n  const { active, account } = useWeb3React();\r\n  const mounajiTestContract = useMounajiTestContract();\r\n  const toast = useToast();\r\n  \r\n  const getMounajiTestContractData = useCallback(async () => {\r\n    if (mounajiTestContract) {\r\n      const totalSupply = await mounajiTestContract.methods.totalSupply().call();\r\n      const getBalance = await mounajiTestContract.methods.balanceOf(account).call();\r\n      //   .deterministicPseudoRandomDNA(totalSupply, account)\r\n      //   .call();\r\n      // const image = await mounajiTestContract.methods.imageByDNA(dnaPreview).call();\r\n      // setImageSrc(image);\r\n    }\r\n  }, [mounajiTestContract, account]);\r\n\r\n  useEffect(() => {\r\n    getMounajiTestContractData();\r\n  }, [getMounajiTestContractData]);\r\n\r\n  const mint = () => {\r\n    setIsMinting(true);\r\n\r\nmounajiTestContract.methods.mint(account, 1000000).send({\r\n\r\n\r\n  from: account,\r\n  value: 1e18\r\n\r\n})\r\n.on('transactionHash', (txHash) => {\r\n  setIsMinting(false);\r\n   toast({\r\n     title: 'transaccion enviada',\r\n     description: 'txHash',\r\n     status: 'info'\r\n   })\r\n\r\n})\r\n.on('receipt',() => {\r\n  setIsMinting(false);\r\n  toast({\r\n    title: 'Transaccion confirmada !',\r\n    description: 'Enjoy playing Starway !',\r\n    status: 'success'\r\n\r\n  })\r\n\r\n})\r\n.on('error', (error) => {\r\n  setIsMinting(false);\r\n  toast({\r\n    title: 'Transaccion fallida',\r\n    description: error.message,\r\n    status: 'error',\r\n  })\r\n\r\n})\r\n  }\r\n  return (\r\n    <Box>\r\n      <title>Starway</title>\r\n    </Box>\r\n    \r\n//   <Box\r\n//   maxW='fixed' borderWidth='1px' borderRadius='lg'\r\n  \r\n//   backgroundcolor='blue'\r\n  \r\n//   pos={\"absolute\"}\r\n//   align={\"center\"}\r\n//   justify={\"center\"}\r\n//   backgroundRepeat={\"no-repeat\"}\r\n//   backgroundSize={\"cover\"}\r\n//   margin={\"0\"}\r\n//   top={\"55px\" }\r\n//   left={\"0\"}\r\n//   w={\"100%\"}\r\n//   h={\"100%\"}\r\n// >\r\n// <Image \r\n//   maxW='700px' borderWidth='1px' borderRadius='lg' overflow='scroll' position='top'\r\n//   marginTop={\"-200px\"}\r\n//   src={\"../images/starway.png\"}\r\n  \r\n  \r\n  \r\n  \r\n// />\r\n\r\n// <Stack\r\n      \r\n//       align={\"center\"}\r\n//       spacing={{ base: 8, md: 10 }}\r\n//        py={{ base: -20, md: -20 }}\r\n//       direction={{ base: \"column-reverse\", md: \"row\" }}\r\n      \r\n//     >\r\n      \r\n        \r\n      \r\n   \r\n//       <Stack flex={1} spacing={{ base: 5, md: 10 }} marginTop={'250px'}>\r\n        \r\n      \r\n//         <AspectRatio maxW='500px' ratio={1}   >\r\n//   <iframe\r\n//     title='naruto'\r\n//     pos={'absolute'}\r\n//     width={'100px'}\r\n//     src='https://www.youtube.com/embed/ES6SQhlEXfI'\r\n//     allowFullScreen\r\n    \r\n//   />\r\n// </AspectRatio>\r\n\r\n       \r\n//         <Text color={\"gray.500\"}>\r\n//           Star token is a cryto-currency that is used for participate in Rank modes on Starway \r\n//         </Text>\r\n//         <Text color={\"green.500\"}>\r\n//           Get your Stars and start ean for playing now !\r\n//         </Text>\r\n//         <Stack\r\n//           spacing={{ base: 4, sm: 6 }}\r\n//           direction={{ base: \"column\", sm: \"row\" }}\r\n//         >\r\n//           <Button\r\n//             rounded={\"full\"}\r\n//             size={\"lg\"}\r\n//             fontWeight={\"normal\"}\r\n//             px={6}\r\n//             colorScheme={\"green\"}\r\n//             bg={\"green.400\"}\r\n//             _hover={{ bg: \"green.500\" }}\r\n//             disabled={!mounajiTestContract}\r\n//             onClick={mint}\r\n//             isLoading= {isMinting}\r\n//           >\r\n//             Get your Star Token !\r\n//           </Button>\r\n//           <Link to=\"/swaptokens\">\r\n//             <Button rounded={\"full\"} size={\"lg\"} fontWeight={\"normal\"} px={6}>\r\n//               SwapTokens\r\n//             </Button>\r\n//           </Link>\r\n//         </Stack>\r\n//       </Stack>\r\n//       <Flex\r\n//         flex={1}\r\n//         direction=\"column\"\r\n//         justify={\"center\"}\r\n//         align={\"center\"}\r\n//         position={\"relative\"}\r\n//         w={\"full\"}\r\n//       >\r\n//         <Image \r\n//         src={active ? imageSrc : \"../../images/starway.png\"} />\r\n//         {active ? (\r\n//           <>\r\n            \r\n//           </>\r\n//         ) : (\r\n//           <Badge mt={2}>Wallet desconectado</Badge>\r\n//         )}\r\n//       </Flex>\r\n//     </Stack>\r\n//     </Box>  \r\n      \r\n    \r\n   );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useWeb3React } from '@web3-react/core';\r\n// import { useCallback, useEffect, useState } from 'react';\r\n// import useMounajiTestContract from '../../hooks/useMounajiTestContract';\r\n\r\n// const Home = () => {\r\n//   const { active }  = useWeb3React(); \r\n//   const [totalSupply, setTotalSupply] = useState();\r\n\r\n//   const mounajiTestContract = useMounajiTestContract();\r\n\r\n//   const getTotalSupply = useCallback(async () => {\r\n//     if(mounajiTestContract){\r\n//       const result = await mounajiTestContract.methods.totalSupply().call();\r\n//       setTotalSupply(result);\r\n//     }\r\n\r\n//   }, [mounajiTestContract])\r\n\r\n//   useEffect (() => {\r\n//       getTotalSupply();\r\n//   }, [getTotalSupply]);\r\n\r\n//   if (!active) return \"Connect your wallet\"\r\n\r\n//   return (\r\n//     <>\r\n//       <p>Max supply:{totalSupply} </p>\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Home;\r\n"]},"metadata":{},"sourceType":"module"}